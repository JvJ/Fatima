
Connecting to localhost:46874

Sam: Processing message: AGENTS Sam User

Motivator found: Affiliation

Motivator found: Integrity

Motivator found: Energy

Motivator found: Certainty

Motivator found: Competence

LOADING Needs: 

Sending Look-AT: Sam

Perceiving Entities: [Sam, User]

Sam: Processing message: LOOK-AT Sam sex:M time:Morning location:Office name:Sam role:Sam isPerson:True 

Look-At:Sam sex M

Look-At:Sam time Morning

Look-At:Sam location Office

Look-At:Sam name Sam

Look-At:Sam role Sam

Look-At:Sam isPerson True

Sending Look-AT: User

Sam: Processing message: ACTION-FINISHED Sam look-at Sam

can act now!

Sam: Processing message: LOOK-AT User isPerson:True has,chocolate:True power:5 facial-exp:HAPPY 

Look-At:User isPerson True

Look-At:User has,chocolate True

Look-At:User power 5

Look-At:User facial-exp HAPPY

Sam: Processing message: ACTION-FINISHED Sam look-at User

can act now!

PropertyChanged: [*] SELF(sex) M

PropertyChanged: [*] SELF(time) Morning

PropertyChanged: [*] SELF(location) Office

PropertyChanged: [*] SELF(name) SELF

PropertyChanged: [*] SELF(role) SELF

PropertyChanged: [*] SELF(isPerson) True

PropertyChanged: [*] User(isPerson) True

PropertyChanged: [*] User(has,chocolate) True

PropertyChanged: [*] User(power) 5

PropertyChanged: [*] User(facial-exp) HAPPY

appraising event: EVENT(SELF,look-at,SELF)

appraising event: EVENT(SELF,look-at,User)

Sam: Processing message: ENTITY-ADDED John

Sending Look-AT: John

Sam: Processing message: ACTION-FINISHED John look-at Sam

can act now!

Perceiving Entities: [John]

appraising event: EVENT(John,look-at,SELF)

Sam: Processing message: LOOK-AT John sex:M time:Morning location:Office name:John role:John isPerson:True 

Look-At:John sex M

Look-At:John time Morning

Look-At:John location Office

Look-At:John name John

Look-At:John role John

Look-At:John isPerson True

Sam: Processing message: ACTION-FINISHED Sam look-at John

can act now!

Sam: Processing message: ACTION-FINISHED John look-at John

can act now!

Sam: Processing message: ACTION-FINISHED John look-at User

can act now!

PropertyChanged: [*] John(sex) M

PropertyChanged: [*] John(time) Morning

PropertyChanged: [*] John(location) Office

PropertyChanged: [*] John(name) John

PropertyChanged: [*] John(role) John

PropertyChanged: [*] John(isPerson) True

appraising event: EVENT(SELF,look-at,John)

appraising event: EVENT(John,look-at,John)

appraising event: EVENT(John,look-at,User)

Adding 1st level intention: MakeAnotherLaugh(John)

Intention: MakeAnotherLaugh(John) Utilitity: 2.837509 Competence: 0.84842855 Urgency: 1.0 Total: 4.814847

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 2.9082336 Competence: 1.0 Urgency: 1.0 Total: 5.8164673

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 1.2214047 Competence: 1.0 Urgency: 1.0 Total: 2.4428093

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 1.3612096 Competence: 1.0 Urgency: 1.0 Total: 2.7224193

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 0.42701727 Competence: 1.0 Urgency: 1.0 Total: 0.85403454

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 0.5833819 Competence: 1.0 Urgency: 1.0 Total: 1.1667638

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 0.44745126 Competence: 1.0 Urgency: 1.0 Total: 0.8949025

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 0.6114848 Competence: 1.0 Urgency: 1.0 Total: 1.2229697

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 3.362279 Competence: 1.0 Urgency: 1.0 Total: 6.724558

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 3.4523573 Competence: 1.0 Urgency: 1.0 Total: 6.9047146

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 5.3532333 Competence: 1.0 Urgency: 1.0 Total: 10.706467

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 5.3715234 Competence: 1.0 Urgency: 1.0 Total: 10.743047

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 5.374168 Competence: 1.0 Urgency: 1.0 Total: 10.748336

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 3.8364487 Competence: 1.0 Urgency: 1.0 Total: 7.6728973

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 3.9342787 Competence: 1.0 Urgency: 1.0 Total: 7.8685575

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Intention: MakeAnotherLaugh(John) Utilitity: 2.3064384 Competence: 0.6203618 Urgency: 1.0 Total: 2.8616526

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 2.4760149 Competence: 1.0 Urgency: 1.0 Total: 4.9520297

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 4.595445 Competence: 1.0 Urgency: 1.0 Total: 9.19089

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 4.6735783 Competence: 1.0 Urgency: 1.0 Total: 9.347157

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 9.642234 Competence: 1.0 Urgency: 1.0 Total: 19.284468
