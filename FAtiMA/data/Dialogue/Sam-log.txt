
Connecting to localhost:46874

Sam: Processing message: AGENTS John Sam User

Sending Look-AT: John

Motivator found: Affiliation

Motivator found: Integrity

Motivator found: Energy

Motivator found: Certainty

Motivator found: Competence

LOADING Needs: 

Perceiving Entities: [John, Sam, User]

Sam: Processing message: LOOK-AT John sex:M time:Morning location:Office name:John role:John isPerson:True 

Look-At:John sex M

Look-At:John time Morning

Look-At:John location Office

Look-At:John name John

Look-At:John role John

Look-At:John isPerson True

Sending Look-AT: Sam

Sam: Processing message: ACTION-FINISHED Sam look-at John

can act now!

Sam: Processing message: ACTION-FINISHED John look-at Sam

can act now!

Sam: Processing message: LOOK-AT Sam sex:M time:Morning location:Office name:Sam role:Sam isPerson:True 

Look-At:Sam sex M

Look-At:Sam time Morning

Look-At:Sam location Office

Look-At:Sam name Sam

Look-At:Sam role Sam

Look-At:Sam isPerson True

Sending Look-AT: User

Sam: Processing message: ACTION-FINISHED Sam look-at Sam

can act now!

PropertyChanged: [*] John(sex) M

PropertyChanged: [*] John(time) Morning

PropertyChanged: [*] John(location) Office

PropertyChanged: [*] John(name) John

PropertyChanged: [*] John(role) John

PropertyChanged: [*] John(isPerson) True

PropertyChanged: [*] SELF(sex) M

PropertyChanged: [*] SELF(time) Morning

PropertyChanged: [*] SELF(location) Office

PropertyChanged: [*] SELF(name) SELF

PropertyChanged: [*] SELF(role) SELF

PropertyChanged: [*] SELF(isPerson) True

appraising event: EVENT(SELF,look-at,John)

appraising event: EVENT(John,look-at,SELF)

appraising event: EVENT(SELF,look-at,SELF)

Adding 1st level intention: MakeAnotherLaugh(John)

Intention: MakeAnotherLaugh(John) Utilitity: 2.79375 Competence: 0.85 Urgency: 1.0 Total: 4.7493753

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sam: Processing message: LOOK-AT User isPerson:True has,chocolate:True power:5 facial-exp:HAPPY 

Look-At:User isPerson True

Look-At:User has,chocolate True

Look-At:User power 5

Look-At:User facial-exp HAPPY

Sam: Processing message: ACTION-FINISHED Sam look-at User

can act now!

PropertyChanged: [*] User(isPerson) True

PropertyChanged: [*] User(has,chocolate) True

PropertyChanged: [*] User(power) 5

PropertyChanged: [*] User(facial-exp) HAPPY

appraising event: EVENT(SELF,look-at,User)

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 2.880268 Competence: 1.0 Urgency: 1.0 Total: 5.760536

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Sam: Processing message: ACTION-FINISHED User Start

can act now!

appraising event: EVENT(User,Start)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 7.914586 Competence: 1.0 Urgency: 1.0 Total: 15.829172

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 7.9478703 Competence: 1.0 Urgency: 1.0 Total: 15.8957405

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 4.941262 Competence: 1.0 Urgency: 1.0 Total: 9.882524

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 5.04771 Competence: 1.0 Urgency: 1.0 Total: 10.09542

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 2.6155572 Competence: 1.0 Urgency: 1.0 Total: 5.2311144

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 2.785423 Competence: 1.0 Urgency: 1.0 Total: 5.570846

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 1.3958848 Competence: 1.0 Urgency: 1.0 Total: 2.7917695

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 1.4742 Competence: 1.0 Urgency: 1.0 Total: 2.9484

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 6.0769286 Competence: 1.0 Urgency: 1.0 Total: 12.153857

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 6.2070208 Competence: 1.0 Urgency: 1.0 Total: 12.4140415

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 3.4443994 Competence: 1.0 Urgency: 1.0 Total: 6.8887987

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 2.1951706 Competence: 1.0 Urgency: 1.0 Total: 4.3903413

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 2.251774 Competence: 1.0 Urgency: 1.0 Total: 4.503548

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 1.5555984 Competence: 1.0 Urgency: 1.0 Total: 3.1111968

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 1.6160878 Competence: 1.0 Urgency: 1.0 Total: 3.2321756

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 6.145012 Competence: 1.0 Urgency: 1.0 Total: 12.290024

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 6.2768793 Competence: 1.0 Urgency: 1.0 Total: 12.553759

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 3.5399032 Competence: 1.0 Urgency: 1.0 Total: 7.0798063

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 3.7209485 Competence: 1.0 Urgency: 1.0 Total: 7.441897

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 7.883709 Competence: 1.0 Urgency: 1.0 Total: 15.767418

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 7.9923096 Competence: 1.0 Urgency: 1.0 Total: 15.984619

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 11.109859 Competence: 1.0 Urgency: 1.0 Total: 22.219719

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 7.390569 Competence: 1.0 Urgency: 1.0 Total: 14.781138

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 7.504196 Competence: 1.0 Urgency: 1.0 Total: 15.008392

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 10.902335 Competence: 1.0 Urgency: 1.0 Total: 21.80467

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 10.939226 Competence: 1.0 Urgency: 1.0 Total: 21.878452

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 12.264696 Competence: 1.0 Urgency: 1.0 Total: 24.529392

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 12.299272 Competence: 1.0 Urgency: 1.0 Total: 24.598543

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 13.251334 Competence: 1.0 Urgency: 1.0 Total: 26.502668

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 13.282516 Competence: 1.0 Urgency: 1.0 Total: 26.565031

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 13.977416 Competence: 1.0 Urgency: 1.0 Total: 27.954832

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 14.004872 Competence: 1.0 Urgency: 1.0 Total: 28.009745

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 14.527707 Competence: 1.0 Urgency: 1.0 Total: 29.055414

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 14.551705 Competence: 1.0 Urgency: 1.0 Total: 29.10341

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 9.95045 Competence: 1.0 Urgency: 1.0 Total: 19.9009

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 10.060969 Competence: 1.0 Urgency: 1.0 Total: 20.121939

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 6.2989364 Competence: 1.0 Urgency: 1.0 Total: 12.597873

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 6.4773088 Competence: 1.0 Urgency: 1.0 Total: 12.9546175

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 10.118589 Competence: 1.0 Urgency: 1.0 Total: 20.237179

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 6.375379 Competence: 1.0 Urgency: 1.0 Total: 12.750758

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 6.538944 Competence: 1.0 Urgency: 1.0 Total: 13.077888

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 10.300754 Competence: 1.0 Urgency: 1.0 Total: 20.601507

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 10.374919 Competence: 1.0 Urgency: 1.0 Total: 20.749838

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 6.6609054 Competence: 1.0 Urgency: 1.0 Total: 13.321811

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 6.8068604 Competence: 1.0 Urgency: 1.0 Total: 13.613721

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 3.898273 Competence: 1.0 Urgency: 1.0 Total: 7.796546

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 4.0489364 Competence: 1.0 Urgency: 1.0 Total: 8.097873

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 8.3109 Competence: 1.0 Urgency: 1.0 Total: 16.6218

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 4.9478 Competence: 1.0 Urgency: 1.0 Total: 9.8956

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 5.13484 Competence: 1.0 Urgency: 1.0 Total: 10.26968

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 3.2709086 Competence: 1.0 Urgency: 1.0 Total: 6.541817

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 3.3377311 Competence: 1.0 Urgency: 1.0 Total: 6.6754622

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 2.3252006 Competence: 1.0 Urgency: 1.0 Total: 4.650401

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 2.3957639 Competence: 1.0 Urgency: 1.0 Total: 4.7915277

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 1.6486387 Competence: 1.0 Urgency: 1.0 Total: 3.2972775

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 1.7150873 Competence: 1.0 Urgency: 1.0 Total: 3.4301746

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 6.64745 Competence: 1.0 Urgency: 1.0 Total: 13.2949

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 6.774343 Competence: 1.0 Urgency: 1.0 Total: 13.548686

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 3.885079 Competence: 1.0 Urgency: 1.0 Total: 7.770158

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 2.5384345 Competence: 1.0 Urgency: 1.0 Total: 5.076869

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 2.5824986 Competence: 1.0 Urgency: 1.0 Total: 5.164997

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 7.268406 Competence: 1.0 Urgency: 1.0 Total: 14.536812

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 7.3979983 Competence: 1.0 Urgency: 1.0 Total: 14.795997

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 11.237194 Competence: 1.0 Urgency: 1.0 Total: 22.474388

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 11.281358 Competence: 1.0 Urgency: 1.0 Total: 22.562716

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 7.4654193 Competence: 1.0 Urgency: 1.0 Total: 14.930839

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 7.583848 Competence: 1.0 Urgency: 1.0 Total: 15.167696

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 11.455096 Competence: 1.0 Urgency: 1.0 Total: 22.910192

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 11.48978 Competence: 1.0 Urgency: 1.0 Total: 22.97956

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 13.14533 Competence: 1.0 Urgency: 1.0 Total: 26.29066

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 14.268195 Competence: 1.0 Urgency: 1.0 Total: 28.53639

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 14.291285 Competence: 1.0 Urgency: 1.0 Total: 28.58257

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 15.10066 Competence: 1.0 Urgency: 1.0 Total: 30.20132

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 15.119787 Competence: 1.0 Urgency: 1.0 Total: 30.239574

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 15.706986 Competence: 1.0 Urgency: 1.0 Total: 31.413973

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 15.722732 Competence: 1.0 Urgency: 1.0 Total: 31.445463

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 16.086554 Competence: 1.0 Urgency: 1.0 Total: 32.173107

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 16.099998 Competence: 1.0 Urgency: 1.0 Total: 32.199997

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 16.219305 Competence: 1.0 Urgency: 1.0 Total: 32.43861

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 11.115529 Competence: 1.0 Urgency: 1.0 Total: 22.231058

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 11.221153 Competence: 1.0 Urgency: 1.0 Total: 22.442307

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 7.066136 Competence: 1.0 Urgency: 1.0 Total: 14.132272

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 7.244489 Competence: 1.0 Urgency: 1.0 Total: 14.488978

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 11.058668 Competence: 1.0 Urgency: 1.0 Total: 22.117336

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 11.144159 Competence: 1.0 Urgency: 1.0 Total: 22.288319

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 7.1369753 Competence: 1.0 Urgency: 1.0 Total: 14.273951

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 7.294388 Competence: 1.0 Urgency: 1.0 Total: 14.588776

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 4.3958826 Competence: 1.0 Urgency: 1.0 Total: 8.791765

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 3.0792556 Competence: 1.0 Urgency: 1.0 Total: 6.158511

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 3.1246192 Competence: 1.0 Urgency: 1.0 Total: 6.2492385

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 2.1789005 Competence: 1.0 Urgency: 1.0 Total: 4.357801

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 2.238154 Competence: 1.0 Urgency: 1.0 Total: 4.476308

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 1.5445012 Competence: 1.0 Urgency: 1.0 Total: 3.0890024

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 1.6088922 Competence: 1.0 Urgency: 1.0 Total: 3.2177844

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 6.9102607 Competence: 1.0 Urgency: 1.0 Total: 13.820521

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 7.0324907 Competence: 1.0 Urgency: 1.0 Total: 14.064981

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 11.226878 Competence: 1.0 Urgency: 1.0 Total: 22.453756

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 11.273094 Competence: 1.0 Urgency: 1.0 Total: 22.546188

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 7.470042 Competence: 1.0 Urgency: 1.0 Total: 14.940084

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 7.582334 Competence: 1.0 Urgency: 1.0 Total: 15.164668

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 4.459478 Competence: 1.0 Urgency: 1.0 Total: 8.918956

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 4.6358075 Competence: 1.0 Urgency: 1.0 Total: 9.271615

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 9.347052 Competence: 1.0 Urgency: 1.0 Total: 18.694103

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 9.437211 Competence: 1.0 Urgency: 1.0 Total: 18.874422

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 5.9343104 Competence: 1.0 Urgency: 1.0 Total: 11.868621

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 6.090677 Competence: 1.0 Urgency: 1.0 Total: 12.181354

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 10.463433 Competence: 1.0 Urgency: 1.0 Total: 20.926867

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 6.6617866 Competence: 1.0 Urgency: 1.0 Total: 13.323573

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 6.8079257 Competence: 1.0 Urgency: 1.0 Total: 13.615851

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 11.099578 Competence: 1.0 Urgency: 1.0 Total: 22.199156

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 11.157286 Competence: 1.0 Urgency: 1.0 Total: 22.314571

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 13.581133 Competence: 1.0 Urgency: 1.0 Total: 27.162266

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 13.603679 Competence: 1.0 Urgency: 1.0 Total: 27.207357

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 14.885684 Competence: 1.0 Urgency: 1.0 Total: 29.771368

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 14.903539 Competence: 1.0 Urgency: 1.0 Total: 29.807077

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 15.820601 Competence: 1.0 Urgency: 1.0 Total: 31.641203

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 15.834034 Competence: 1.0 Urgency: 1.0 Total: 31.668068

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 10.865144 Competence: 1.0 Urgency: 1.0 Total: 21.730288

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 10.964268 Competence: 1.0 Urgency: 1.0 Total: 21.928535

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 14.083842 Competence: 1.0 Urgency: 1.0 Total: 28.167685

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 14.104399 Competence: 1.0 Urgency: 1.0 Total: 28.208797

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 9.556825 Competence: 1.0 Urgency: 1.0 Total: 19.11365

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 13.175784 Competence: 1.0 Urgency: 1.0 Total: 26.351568

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 13.198838 Competence: 1.0 Urgency: 1.0 Total: 26.397676

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 14.654092 Competence: 1.0 Urgency: 1.0 Total: 29.308184

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 14.672422 Competence: 1.0 Urgency: 1.0 Total: 29.344845

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 15.703273 Competence: 1.0 Urgency: 1.0 Total: 31.406546

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 15.716954 Competence: 1.0 Urgency: 1.0 Total: 31.433908

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 16.452673 Competence: 1.0 Urgency: 1.0 Total: 32.905346

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 16.462374 Competence: 1.0 Urgency: 1.0 Total: 32.924747

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 11.2689495 Competence: 1.0 Urgency: 1.0 Total: 22.537899

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 11.368209 Competence: 1.0 Urgency: 1.0 Total: 22.736418

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 14.437058 Competence: 1.0 Urgency: 1.0 Total: 28.874117

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 14.455936 Competence: 1.0 Urgency: 1.0 Total: 28.911873

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 15.574353 Competence: 1.0 Urgency: 1.0 Total: 31.148706

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 15.588467 Competence: 1.0 Urgency: 1.0 Total: 31.176933

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 16.382431 Competence: 1.0 Urgency: 1.0 Total: 32.764862

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 16.39239 Competence: 1.0 Urgency: 1.0 Total: 32.78478

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 11.206952 Competence: 1.0 Urgency: 1.0 Total: 22.413904

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 11.306111 Competence: 1.0 Urgency: 1.0 Total: 22.612223

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 14.416644 Competence: 1.0 Urgency: 1.0 Total: 28.833288

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 14.435401 Competence: 1.0 Urgency: 1.0 Total: 28.870802

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 15.57842 Competence: 1.0 Urgency: 1.0 Total: 31.15684

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 15.592365 Competence: 1.0 Urgency: 1.0 Total: 31.18473

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 10.614444 Competence: 1.0 Urgency: 1.0 Total: 21.228888

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 10.714498 Competence: 1.0 Urgency: 1.0 Total: 21.428995

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 6.7385125 Competence: 1.0 Urgency: 1.0 Total: 13.477025

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 11.05401 Competence: 1.0 Urgency: 1.0 Total: 22.10802

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 11.137331 Competence: 1.0 Urgency: 1.0 Total: 22.274662

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 11.217658 Competence: 1.0 Urgency: 1.0 Total: 22.435316

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 14.107195 Competence: 1.0 Urgency: 1.0 Total: 28.21439

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 14.126754 Competence: 1.0 Urgency: 1.0 Total: 28.253508

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 9.567988 Competence: 1.0 Urgency: 1.0 Total: 19.135977

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 9.668045 Competence: 1.0 Urgency: 1.0 Total: 19.33609

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 5.995131 Competence: 1.0 Urgency: 1.0 Total: 11.990262

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 3.7432716 Competence: 1.0 Urgency: 1.0 Total: 7.486543

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 3.7971802 Competence: 1.0 Urgency: 1.0 Total: 7.5943604

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 8.7043915 Competence: 1.0 Urgency: 1.0 Total: 17.408783

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 8.826717 Competence: 1.0 Urgency: 1.0 Total: 17.653435

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 5.275054 Competence: 1.0 Urgency: 1.0 Total: 10.550108

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 5.440979 Competence: 1.0 Urgency: 1.0 Total: 10.881958

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 10.112971 Competence: 1.0 Urgency: 1.0 Total: 20.225943

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 10.210269 Competence: 1.0 Urgency: 1.0 Total: 20.420538

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 6.3782663 Competence: 1.0 Urgency: 1.0 Total: 12.756533

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 6.544892 Competence: 1.0 Urgency: 1.0 Total: 13.089784

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 4.0444326 Competence: 1.0 Urgency: 1.0 Total: 8.088865

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 4.107204 Competence: 1.0 Urgency: 1.0 Total: 8.214408

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 2.8569813 Competence: 1.0 Urgency: 1.0 Total: 5.7139626

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 2.9162743 Competence: 1.0 Urgency: 1.0 Total: 5.8325486

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 8.155229 Competence: 1.0 Urgency: 1.0 Total: 16.310457

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 8.27635 Competence: 1.0 Urgency: 1.0 Total: 16.5527

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 12.436733 Competence: 1.0 Urgency: 1.0 Total: 24.873466

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 12.471636 Competence: 1.0 Urgency: 1.0 Total: 24.943272

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 14.49961 Competence: 1.0 Urgency: 1.0 Total: 28.99922

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 14.516673 Competence: 1.0 Urgency: 1.0 Total: 29.033346

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 15.774221 Competence: 1.0 Urgency: 1.0 Total: 31.548443

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 15.786134 Competence: 1.0 Urgency: 1.0 Total: 31.572268

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 10.810465 Competence: 1.0 Urgency: 1.0 Total: 21.62093

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 14.25431 Competence: 1.0 Urgency: 1.0 Total: 28.50862

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 14.27201 Competence: 1.0 Urgency: 1.0 Total: 28.54402

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 15.622865 Competence: 1.0 Urgency: 1.0 Total: 31.24573

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 15.635318 Competence: 1.0 Urgency: 1.0 Total: 31.270636

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 16.399809 Competence: 1.0 Urgency: 1.0 Total: 32.799618

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 16.408974 Competence: 1.0 Urgency: 1.0 Total: 32.817947

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 11.256077 Competence: 1.0 Urgency: 1.0 Total: 22.512154

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 7.0689144 Competence: 1.0 Urgency: 1.0 Total: 14.137829

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 7.2411604 Competence: 1.0 Urgency: 1.0 Total: 14.482321

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 4.598154 Competence: 1.0 Urgency: 1.0 Total: 9.196308

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 4.6622853 Competence: 1.0 Urgency: 1.0 Total: 9.324571

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 3.2478576 Competence: 1.0 Urgency: 1.0 Total: 6.495715

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 3.3172517 Competence: 1.0 Urgency: 1.0 Total: 6.6345034

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 2.2970123 Competence: 1.0 Urgency: 1.0 Total: 4.5940247

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 2.3713903 Competence: 1.0 Urgency: 1.0 Total: 4.7427807

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 1.6311752 Competence: 1.0 Urgency: 1.0 Total: 3.2623503

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 1.7107326 Competence: 1.0 Urgency: 1.0 Total: 3.4214652

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 7.4179277 Competence: 1.0 Urgency: 1.0 Total: 14.8358555

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 7.534422 Competence: 1.0 Urgency: 1.0 Total: 15.068844

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 4.4012933 Competence: 1.0 Urgency: 1.0 Total: 8.802587

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 4.577585 Competence: 1.0 Urgency: 1.0 Total: 9.15517

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 9.603932 Competence: 1.0 Urgency: 1.0 Total: 19.207865

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 9.697264 Competence: 1.0 Urgency: 1.0 Total: 19.394527

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 13.38498 Competence: 1.0 Urgency: 1.0 Total: 26.76996

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 13.404688 Competence: 1.0 Urgency: 1.0 Total: 26.809376

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 9.055773 Competence: 1.0 Urgency: 1.0 Total: 18.111546

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 5.4812794 Competence: 1.0 Urgency: 1.0 Total: 10.962559

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 5.652236 Competence: 1.0 Urgency: 1.0 Total: 11.304472

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 3.4926813 Competence: 1.0 Urgency: 1.0 Total: 6.9853625

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 3.5350072 Competence: 1.0 Urgency: 1.0 Total: 7.0700145

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 2.4624264 Competence: 1.0 Urgency: 1.0 Total: 4.924853

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 2.5015202 Competence: 1.0 Urgency: 1.0 Total: 5.0030403

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 7.9644904 Competence: 1.0 Urgency: 1.0 Total: 15.928981

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 8.086104 Competence: 1.0 Urgency: 1.0 Total: 16.172209

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 4.7479954 Competence: 1.0 Urgency: 1.0 Total: 9.495991

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 4.9056854 Competence: 1.0 Urgency: 1.0 Total: 9.811371

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 9.91674 Competence: 1.0 Urgency: 1.0 Total: 19.83348

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 10.013305 Competence: 1.0 Urgency: 1.0 Total: 20.02661

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 6.2294626 Competence: 1.0 Urgency: 1.0 Total: 12.458925

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 6.3951406 Competence: 1.0 Urgency: 1.0 Total: 12.790281

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 11.054378 Competence: 1.0 Urgency: 1.0 Total: 22.108755

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 11.130691 Competence: 1.0 Urgency: 1.0 Total: 22.261381

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 14.288312 Competence: 1.0 Urgency: 1.0 Total: 28.576624

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 14.304555 Competence: 1.0 Urgency: 1.0 Total: 28.60911

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 9.699906 Competence: 1.0 Urgency: 1.0 Total: 19.399813

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 13.626753 Competence: 1.0 Urgency: 1.0 Total: 27.253506

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 13.644755 Competence: 1.0 Urgency: 1.0 Total: 27.28951

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 9.157488 Competence: 1.0 Urgency: 1.0 Total: 18.314976

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 9.256766 Competence: 1.0 Urgency: 1.0 Total: 18.513533

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 13.313552 Competence: 1.0 Urgency: 1.0 Total: 26.627104

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 13.3321905 Competence: 1.0 Urgency: 1.0 Total: 26.664381

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 8.944525 Competence: 1.0 Urgency: 1.0 Total: 17.88905

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 9.042977 Competence: 1.0 Urgency: 1.0 Total: 18.085955

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 5.521449 Competence: 1.0 Urgency: 1.0 Total: 11.042898

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 5.687066 Competence: 1.0 Urgency: 1.0 Total: 11.374132

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 3.4611046 Competence: 1.0 Urgency: 1.0 Total: 6.9222093

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 3.5293448 Competence: 1.0 Urgency: 1.0 Total: 7.0586896

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 2.4405217 Competence: 1.0 Urgency: 1.0 Total: 4.8810434

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 2.5057547 Competence: 1.0 Urgency: 1.0 Total: 5.0115094

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 8.138884 Competence: 1.0 Urgency: 1.0 Total: 16.277767

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 8.255746 Competence: 1.0 Urgency: 1.0 Total: 16.511492

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 4.8923197 Competence: 1.0 Urgency: 1.0 Total: 9.784639

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 5.064183 Competence: 1.0 Urgency: 1.0 Total: 10.128366

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 10.165442 Competence: 1.0 Urgency: 1.0 Total: 20.330885

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 10.256306 Competence: 1.0 Urgency: 1.0 Total: 20.512611

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 13.966569 Competence: 1.0 Urgency: 1.0 Total: 27.933138

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 9.379656 Competence: 1.0 Urgency: 1.0 Total: 18.759312

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 9.478708 Competence: 1.0 Urgency: 1.0 Total: 18.957417

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 5.8149943 Competence: 1.0 Urgency: 1.0 Total: 11.629989

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 5.9824405 Competence: 1.0 Urgency: 1.0 Total: 11.964881

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 10.8915825 Competence: 1.0 Urgency: 1.0 Total: 21.783165

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 10.968846 Competence: 1.0 Urgency: 1.0 Total: 21.937693

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 7.0172353 Competence: 1.0 Urgency: 1.0 Total: 14.034471

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 11.730615 Competence: 1.0 Urgency: 1.0 Total: 23.46123

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 11.79227 Competence: 1.0 Urgency: 1.0 Total: 23.58454

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 14.609462 Competence: 1.0 Urgency: 1.0 Total: 29.218924

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 14.6238985 Competence: 1.0 Urgency: 1.0 Total: 29.247797

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 15.638057 Competence: 1.0 Urgency: 1.0 Total: 31.276114

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 15.650074 Competence: 1.0 Urgency: 1.0 Total: 31.300148

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 16.316631 Competence: 1.0 Urgency: 1.0 Total: 32.633263

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 16.772854 Competence: 1.0 Urgency: 1.0 Total: 33.545708

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 16.780413 Competence: 1.0 Urgency: 1.0 Total: 33.560825

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 11.486963 Competence: 1.0 Urgency: 1.0 Total: 22.973927

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 11.585801 Competence: 1.0 Urgency: 1.0 Total: 23.171602

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 14.657409 Competence: 1.0 Urgency: 1.0 Total: 29.314817

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 9.875746 Competence: 1.0 Urgency: 1.0 Total: 19.751492

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 9.978551 Competence: 1.0 Urgency: 1.0 Total: 19.957102

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 6.1494846 Competence: 1.0 Urgency: 1.0 Total: 12.298969

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 6.3218417 Competence: 1.0 Urgency: 1.0 Total: 12.643683

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 3.940508 Competence: 1.0 Urgency: 1.0 Total: 7.881016

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 3.9949372 Competence: 1.0 Urgency: 1.0 Total: 7.9898744

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 8.821304 Competence: 1.0 Urgency: 1.0 Total: 17.642609

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 8.945067 Competence: 1.0 Urgency: 1.0 Total: 17.890135

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 5.3839726 Competence: 1.0 Urgency: 1.0 Total: 10.767945

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 5.550518 Competence: 1.0 Urgency: 1.0 Total: 11.101036

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 3.660209 Competence: 1.0 Urgency: 1.0 Total: 7.320418

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 3.739115 Competence: 1.0 Urgency: 1.0 Total: 7.47823

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 2.5806558 Competence: 1.0 Urgency: 1.0 Total: 5.1613116

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 7.8284783 Competence: 1.0 Urgency: 1.0 Total: 15.656957

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 7.9544544 Competence: 1.0 Urgency: 1.0 Total: 15.908909

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 12.198406 Competence: 1.0 Urgency: 1.0 Total: 24.396812

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 12.236631 Competence: 1.0 Urgency: 1.0 Total: 24.473263

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 8.089638 Competence: 1.0 Urgency: 1.0 Total: 16.179276

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 8.205075 Competence: 1.0 Urgency: 1.0 Total: 16.41015

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 12.438401 Competence: 1.0 Urgency: 1.0 Total: 24.876802

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 12.467619 Competence: 1.0 Urgency: 1.0 Total: 24.935238

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 8.322936 Competence: 1.0 Urgency: 1.0 Total: 16.645872

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 8.4288435 Competence: 1.0 Urgency: 1.0 Total: 16.857687

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 12.637233 Competence: 1.0 Urgency: 1.0 Total: 25.274466

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 12.659004 Competence: 1.0 Urgency: 1.0 Total: 25.318008

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 14.475899 Competence: 1.0 Urgency: 1.0 Total: 28.951797

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 14.492864 Competence: 1.0 Urgency: 1.0 Total: 28.985727

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 15.779025 Competence: 1.0 Urgency: 1.0 Total: 31.55805

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 15.790773 Competence: 1.0 Urgency: 1.0 Total: 31.581547

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 10.78694 Competence: 1.0 Urgency: 1.0 Total: 21.57388

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 14.266298 Competence: 1.0 Urgency: 1.0 Total: 28.532597

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 14.283808 Competence: 1.0 Urgency: 1.0 Total: 28.567616

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 9.637321 Competence: 1.0 Urgency: 1.0 Total: 19.274643

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 9.737108 Competence: 1.0 Urgency: 1.0 Total: 19.474216

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 6.000173 Competence: 1.0 Urgency: 1.0 Total: 12.000346

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 6.1686063 Competence: 1.0 Urgency: 1.0 Total: 12.337213

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 3.8120582 Competence: 1.0 Urgency: 1.0 Total: 7.6241164

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 8.782993 Competence: 1.0 Urgency: 1.0 Total: 17.565987

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 8.908139 Competence: 1.0 Urgency: 1.0 Total: 17.816278

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 5.346525 Competence: 1.0 Urgency: 1.0 Total: 10.69305

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 5.4999347 Competence: 1.0 Urgency: 1.0 Total: 10.999869

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 10.27604 Competence: 1.0 Urgency: 1.0 Total: 20.55208

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 10.374487 Competence: 1.0 Urgency: 1.0 Total: 20.748974

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 13.979141 Competence: 1.0 Urgency: 1.0 Total: 27.958282

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 13.997007 Competence: 1.0 Urgency: 1.0 Total: 27.994015

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 15.485947 Competence: 1.0 Urgency: 1.0 Total: 30.971893

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 10.5081835 Competence: 1.0 Urgency: 1.0 Total: 21.016367

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 10.60721 Competence: 1.0 Urgency: 1.0 Total: 21.21442

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 6.6443186 Competence: 1.0 Urgency: 1.0 Total: 13.288637

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 6.812616 Competence: 1.0 Urgency: 1.0 Total: 13.625232

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 4.270948 Competence: 1.0 Urgency: 1.0 Total: 8.541896

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 4.341714 Competence: 1.0 Urgency: 1.0 Total: 8.683428

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 3.0212054 Competence: 1.0 Urgency: 1.0 Total: 6.042411

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 3.0971591 Competence: 1.0 Urgency: 1.0 Total: 6.1943183

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 2.1253397 Competence: 1.0 Urgency: 1.0 Total: 4.2506795

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 2.189914 Competence: 1.0 Urgency: 1.0 Total: 4.379828

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 7.8315816 Competence: 1.0 Urgency: 1.0 Total: 15.663163

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 7.9498587 Competence: 1.0 Urgency: 1.0 Total: 15.899717

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 4.7032247 Competence: 1.0 Urgency: 1.0 Total: 9.406449

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 3.0982604 Competence: 0.8797934 Urgency: 1.0 Total: 5.4516582

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 3.1387215 Competence: 1.0 Urgency: 1.0 Total: 6.277443

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 2.186546 Competence: 1.0 Urgency: 1.0 Total: 4.373092

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 2.2331715 Competence: 1.0 Urgency: 1.0 Total: 4.466343

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 1.5502517 Competence: 1.0 Urgency: 1.0 Total: 3.1005034

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 1.6118231 Competence: 1.0 Urgency: 1.0 Total: 3.2236462

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 1.0959926 Competence: 1.0 Urgency: 1.0 Total: 2.1919851

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 1.1555583 Competence: 1.0 Urgency: 1.0 Total: 2.3111167

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 0.7831412 Competence: 1.0 Urgency: 1.0 Total: 1.5662824

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 0.8495011 Competence: 1.0 Urgency: 1.0 Total: 1.6990021

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 7.0011683 Competence: 1.0 Urgency: 1.0 Total: 14.0023365

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 7.1157703 Competence: 1.0 Urgency: 1.0 Total: 14.231541

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 4.1181793 Competence: 1.0 Urgency: 1.0 Total: 8.236359

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 2.6739988 Competence: 1.0 Urgency: 1.0 Total: 5.3479977

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 2.7302186 Competence: 1.0 Urgency: 1.0 Total: 5.4604373

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 8.27835 Competence: 1.0 Urgency: 1.0 Total: 16.5567

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 8.3962555 Competence: 1.0 Urgency: 1.0 Total: 16.792511

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 4.9863815 Competence: 1.0 Urgency: 1.0 Total: 9.972763

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 5.1512356 Competence: 1.0 Urgency: 1.0 Total: 10.302471

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 3.358122 Competence: 1.0 Urgency: 1.0 Total: 6.716244

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 3.4162705 Competence: 1.0 Urgency: 1.0 Total: 6.832541

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 8.80647 Competence: 1.0 Urgency: 1.0 Total: 17.61294

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 8.923353 Competence: 1.0 Urgency: 1.0 Total: 17.846706

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 13.2190895 Competence: 1.0 Urgency: 1.0 Total: 26.438179

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 13.246906 Competence: 1.0 Urgency: 1.0 Total: 26.493813

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 14.968272 Competence: 1.0 Urgency: 1.0 Total: 29.936544

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 14.9821415 Competence: 1.0 Urgency: 1.0 Total: 29.964283

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 15.861262 Competence: 1.0 Urgency: 1.0 Total: 31.722525

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 15.874951 Competence: 1.0 Urgency: 1.0 Total: 31.749903

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 16.463531 Competence: 1.0 Urgency: 1.0 Total: 32.927063

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 16.47259 Competence: 1.0 Urgency: 1.0 Total: 32.94518

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 11.302814 Competence: 1.0 Urgency: 1.0 Total: 22.605627

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 14.530297 Competence: 1.0 Urgency: 1.0 Total: 29.060595

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 14.547881 Competence: 1.0 Urgency: 1.0 Total: 29.095762

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 9.816525 Competence: 1.0 Urgency: 1.0 Total: 19.63305

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 9.918069 Competence: 1.0 Urgency: 1.0 Total: 19.836138

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 13.555242 Competence: 1.0 Urgency: 1.0 Total: 27.110483

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 13.575723 Competence: 1.0 Urgency: 1.0 Total: 27.151445

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 9.142397 Competence: 1.0 Urgency: 1.0 Total: 18.284794

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 5.5461254 Competence: 1.0 Urgency: 1.0 Total: 11.092251

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 5.718512 Competence: 1.0 Urgency: 1.0 Total: 11.437024

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 5.8836293 Competence: 1.0 Urgency: 1.0 Total: 11.767259

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 10.544687 Competence: 1.0 Urgency: 1.0 Total: 21.089375

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 13.734466 Competence: 1.0 Urgency: 1.0 Total: 27.468931

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 13.754169 Competence: 1.0 Urgency: 1.0 Total: 27.508339

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 15.2132 Competence: 1.0 Urgency: 1.0 Total: 30.4264

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 15.227758 Competence: 1.0 Urgency: 1.0 Total: 30.455517

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 16.243488 Competence: 1.0 Urgency: 1.0 Total: 32.486977

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 16.253334 Competence: 1.0 Urgency: 1.0 Total: 32.506668

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 16.733107 Competence: 1.0 Urgency: 1.0 Total: 33.466213

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 16.740808 Competence: 1.0 Urgency: 1.0 Total: 33.481617

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 11.431829 Competence: 1.0 Urgency: 1.0 Total: 22.863659

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 11.531372 Competence: 1.0 Urgency: 1.0 Total: 23.062744

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 7.2903156 Competence: 1.0 Urgency: 1.0 Total: 14.580631

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 7.461808 Competence: 1.0 Urgency: 1.0 Total: 14.923616

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 4.7347713 Competence: 1.0 Urgency: 1.0 Total: 9.4695425

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 4.7997456 Competence: 1.0 Urgency: 1.0 Total: 9.599491

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 3.3447204 Competence: 1.0 Urgency: 1.0 Total: 6.6894407

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 3.4148903 Competence: 1.0 Urgency: 1.0 Total: 6.8297806

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 8.476878 Competence: 1.0 Urgency: 1.0 Total: 16.953756

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 8.597784 Competence: 1.0 Urgency: 1.0 Total: 17.195568

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 5.1367803 Competence: 1.0 Urgency: 1.0 Total: 10.273561

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 5.31021 Competence: 1.0 Urgency: 1.0 Total: 10.62042

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 10.029175 Competence: 1.0 Urgency: 1.0 Total: 20.05835

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 10.125466 Competence: 1.0 Urgency: 1.0 Total: 20.250933

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 6.3363123 Competence: 1.0 Urgency: 1.0 Total: 12.672625

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 6.5011168 Competence: 1.0 Urgency: 1.0 Total: 13.0022335

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 10.997295 Competence: 1.0 Urgency: 1.0 Total: 21.99459

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 11.072422 Competence: 1.0 Urgency: 1.0 Total: 22.144844

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 14.042474 Competence: 1.0 Urgency: 1.0 Total: 28.084948

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 14.061163 Competence: 1.0 Urgency: 1.0 Total: 28.122326

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 15.439337 Competence: 1.0 Urgency: 1.0 Total: 30.878674

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 15.452851 Competence: 1.0 Urgency: 1.0 Total: 30.905703

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 10.544471 Competence: 1.0 Urgency: 1.0 Total: 21.088942

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 10.64227 Competence: 1.0 Urgency: 1.0 Total: 21.28454

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 14.083816 Competence: 1.0 Urgency: 1.0 Total: 28.167631

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 9.4776945 Competence: 1.0 Urgency: 1.0 Total: 18.955389

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 9.578656 Competence: 1.0 Urgency: 1.0 Total: 19.157312

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 13.387289 Competence: 1.0 Urgency: 1.0 Total: 26.774578

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 13.407462 Competence: 1.0 Urgency: 1.0 Total: 26.814924

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 15.01107 Competence: 1.0 Urgency: 1.0 Total: 30.02214

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 15.026074 Competence: 1.0 Urgency: 1.0 Total: 30.052149

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 10.200424 Competence: 1.0 Urgency: 1.0 Total: 20.400848

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 13.863452 Competence: 1.0 Urgency: 1.0 Total: 27.726904

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 13.882234 Competence: 1.0 Urgency: 1.0 Total: 27.764467

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 13.900924 Competence: 1.0 Urgency: 1.0 Total: 27.801847

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 15.373921 Competence: 1.0 Urgency: 1.0 Total: 30.747843

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 10.396056 Competence: 1.0 Urgency: 1.0 Total: 20.792112

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 10.496649 Competence: 1.0 Urgency: 1.0 Total: 20.993298

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 14.064783 Competence: 1.0 Urgency: 1.0 Total: 28.129566

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 14.082828 Competence: 1.0 Urgency: 1.0 Total: 28.165655

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 15.515627 Competence: 1.0 Urgency: 1.0 Total: 31.031254

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 15.528345 Competence: 1.0 Urgency: 1.0 Total: 31.05669

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 15.540996 Competence: 1.0 Urgency: 1.0 Total: 31.081991

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 10.586621 Competence: 1.0 Urgency: 1.0 Total: 21.173243

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 6.5615754 Competence: 1.0 Urgency: 1.0 Total: 13.123151

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 6.734174 Competence: 1.0 Urgency: 1.0 Total: 13.468348

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 4.2527366 Competence: 1.0 Urgency: 1.0 Total: 8.505473

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 4.3065495 Competence: 1.0 Urgency: 1.0 Total: 8.613099

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 9.218462 Competence: 1.0 Urgency: 1.0 Total: 18.436924

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 9.338826 Competence: 1.0 Urgency: 1.0 Total: 18.677652

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 13.303424 Competence: 1.0 Urgency: 1.0 Total: 26.606848

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 13.334292 Competence: 1.0 Urgency: 1.0 Total: 26.668585

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 15.17664 Competence: 1.0 Urgency: 1.0 Total: 30.35328

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 15.190459 Competence: 1.0 Urgency: 1.0 Total: 30.380919

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 10.30478 Competence: 1.0 Urgency: 1.0 Total: 20.60956

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 10.403396 Competence: 1.0 Urgency: 1.0 Total: 20.806791

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 14.0237465 Competence: 1.0 Urgency: 1.0 Total: 28.047493

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 14.04141 Competence: 1.0 Urgency: 1.0 Total: 28.08282

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 15.530681 Competence: 1.0 Urgency: 1.0 Total: 31.061361

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 10.508447 Competence: 1.0 Urgency: 1.0 Total: 21.016893

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 10.608214 Competence: 1.0 Urgency: 1.0 Total: 21.216429

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 6.599696 Competence: 1.0 Urgency: 1.0 Total: 13.199392

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 6.7702775 Competence: 1.0 Urgency: 1.0 Total: 13.540555

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 11.328551 Competence: 1.0 Urgency: 1.0 Total: 22.657103

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 11.406083 Competence: 1.0 Urgency: 1.0 Total: 22.812166

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 14.472407 Competence: 1.0 Urgency: 1.0 Total: 28.944815

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 14.488459 Competence: 1.0 Urgency: 1.0 Total: 28.976917

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 15.739478 Competence: 1.0 Urgency: 1.0 Total: 31.478956

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 15.751047 Competence: 1.0 Urgency: 1.0 Total: 31.502094

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 16.393044 Competence: 1.0 Urgency: 1.0 Total: 32.786087

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 16.402252 Competence: 1.0 Urgency: 1.0 Total: 32.804504

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 16.83788 Competence: 1.0 Urgency: 1.0 Total: 33.67576

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 16.845043 Competence: 1.0 Urgency: 1.0 Total: 33.690086

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 11.564534 Competence: 1.0 Urgency: 1.0 Total: 23.129068

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 11.661724 Competence: 1.0 Urgency: 1.0 Total: 23.323448

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 7.410184 Competence: 1.0 Urgency: 1.0 Total: 14.820368

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 7.579003 Competence: 1.0 Urgency: 1.0 Total: 15.158006

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 4.78375 Competence: 1.0 Urgency: 1.0 Total: 9.5675

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 4.877198 Competence: 1.0 Urgency: 1.0 Total: 9.754396

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 9.491693 Competence: 1.0 Urgency: 1.0 Total: 18.983385

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 9.610859 Competence: 1.0 Urgency: 1.0 Total: 19.221718

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 13.324433 Competence: 1.0 Urgency: 1.0 Total: 26.648867

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 13.355889 Competence: 1.0 Urgency: 1.0 Total: 26.711779

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 15.024895 Competence: 1.0 Urgency: 1.0 Total: 30.04979

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 10.174737 Competence: 1.0 Urgency: 1.0 Total: 20.349474

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 10.276043 Competence: 1.0 Urgency: 1.0 Total: 20.552086

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 13.791625 Competence: 1.0 Urgency: 1.0 Total: 27.58325

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 13.8115635 Competence: 1.0 Urgency: 1.0 Total: 27.623127

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 15.220101 Competence: 1.0 Urgency: 1.0 Total: 30.440203

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 15.234954 Competence: 1.0 Urgency: 1.0 Total: 30.469908

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 16.232557 Competence: 1.0 Urgency: 1.0 Total: 32.465115

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 16.242664 Competence: 1.0 Urgency: 1.0 Total: 32.48533

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 16.78857 Competence: 1.0 Urgency: 1.0 Total: 33.57714

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 16.795952 Competence: 1.0 Urgency: 1.0 Total: 33.591904

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 17.087019 Competence: 1.0 Urgency: 1.0 Total: 34.174038

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 17.092875 Competence: 1.0 Urgency: 1.0 Total: 34.18575

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 11.770141 Competence: 1.0 Urgency: 1.0 Total: 23.540281

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 7.4230547 Competence: 1.0 Urgency: 1.0 Total: 14.846109

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 7.597523 Competence: 1.0 Urgency: 1.0 Total: 15.195046

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 11.646516 Competence: 1.0 Urgency: 1.0 Total: 23.293032

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 11.72702 Competence: 1.0 Urgency: 1.0 Total: 23.45404

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 7.512386 Competence: 1.0 Urgency: 1.0 Total: 15.024772

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 7.6670074 Competence: 1.0 Urgency: 1.0 Total: 15.334015

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 4.6449428 Competence: 1.0 Urgency: 1.0 Total: 9.2898855

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 4.710124 Competence: 1.0 Urgency: 1.0 Total: 9.420248

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 3.2839746 Competence: 1.0 Urgency: 1.0 Total: 6.5679493

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 3.3542192 Competence: 1.0 Urgency: 1.0 Total: 6.7084384

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 2.3241506 Competence: 1.0 Urgency: 1.0 Total: 4.648301

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 2.3991826 Competence: 1.0 Urgency: 1.0 Total: 4.798365

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 1.6512494 Competence: 1.0 Urgency: 1.0 Total: 3.3024988

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 7.1907983 Competence: 1.0 Urgency: 1.0 Total: 14.381597

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 7.3138576 Competence: 1.0 Urgency: 1.0 Total: 14.627715

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 4.2133427 Competence: 1.0 Urgency: 1.0 Total: 8.426685

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 4.374054 Competence: 1.0 Urgency: 1.0 Total: 8.748108

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 9.349945 Competence: 1.0 Urgency: 1.0 Total: 18.69989

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 9.448967 Competence: 1.0 Urgency: 1.0 Total: 18.897934

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 13.170873 Competence: 1.0 Urgency: 1.0 Total: 26.341745

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 13.192207 Competence: 1.0 Urgency: 1.0 Total: 26.384415

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 8.909652 Competence: 1.0 Urgency: 1.0 Total: 17.819304

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 9.008816 Competence: 1.0 Urgency: 1.0 Total: 18.017632

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 12.899838 Competence: 1.0 Urgency: 1.0 Total: 25.799677

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 8.616131 Competence: 1.0 Urgency: 1.0 Total: 17.232262

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 8.718215 Competence: 1.0 Urgency: 1.0 Total: 17.43643

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 5.258495 Competence: 1.0 Urgency: 1.0 Total: 10.51699

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 5.4284024 Competence: 1.0 Urgency: 1.0 Total: 10.856805

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 10.278434 Competence: 1.0 Urgency: 1.0 Total: 20.556868

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 10.358394 Competence: 1.0 Urgency: 1.0 Total: 20.716787

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 6.557123 Competence: 1.0 Urgency: 1.0 Total: 13.114246

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 6.707793 Competence: 1.0 Urgency: 1.0 Total: 13.415586

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 11.267132 Competence: 1.0 Urgency: 1.0 Total: 22.534264

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 11.328684 Competence: 1.0 Urgency: 1.0 Total: 22.657368

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 14.084891 Competence: 1.0 Urgency: 1.0 Total: 28.169783

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 14.103014 Competence: 1.0 Urgency: 1.0 Total: 28.206028

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 9.539602 Competence: 1.0 Urgency: 1.0 Total: 19.079205

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 9.6386385 Competence: 1.0 Urgency: 1.0 Total: 19.277277

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 5.9754977 Competence: 1.0 Urgency: 1.0 Total: 11.950995

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 6.1415167 Competence: 1.0 Urgency: 1.0 Total: 12.283033

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 10.790109 Competence: 1.0 Urgency: 1.0 Total: 21.580217

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 10.868081 Competence: 1.0 Urgency: 1.0 Total: 21.736162

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 14.022931 Competence: 1.0 Urgency: 1.0 Total: 28.045862

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 9.458854 Competence: 1.0 Urgency: 1.0 Total: 18.917707

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 9.558385 Competence: 1.0 Urgency: 1.0 Total: 19.11677

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 13.411524 Competence: 1.0 Urgency: 1.0 Total: 26.823048

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 13.431025 Competence: 1.0 Urgency: 1.0 Total: 26.86205

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 15.081096 Competence: 1.0 Urgency: 1.0 Total: 30.162191

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 15.09532 Competence: 1.0 Urgency: 1.0 Total: 30.19064

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 16.065916 Competence: 1.0 Urgency: 1.0 Total: 32.131832

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 16.07642 Competence: 1.0 Urgency: 1.0 Total: 32.15284

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 10.974134 Competence: 1.0 Urgency: 1.0 Total: 21.948269

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 11.07184 Competence: 1.0 Urgency: 1.0 Total: 22.14368

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 6.998967 Competence: 1.0 Urgency: 1.0 Total: 13.997934

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 7.1661706 Competence: 1.0 Urgency: 1.0 Total: 14.332341

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 11.515489 Competence: 1.0 Urgency: 1.0 Total: 23.030977

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 11.591247 Competence: 1.0 Urgency: 1.0 Total: 23.182493

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 14.4911375 Competence: 1.0 Urgency: 1.0 Total: 28.982275

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 14.507898 Competence: 1.0 Urgency: 1.0 Total: 29.015797

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 15.803822 Competence: 1.0 Urgency: 1.0 Total: 31.607643

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 15.815342 Competence: 1.0 Urgency: 1.0 Total: 31.630684

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 16.469198 Competence: 1.0 Urgency: 1.0 Total: 32.938396

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 16.478056 Competence: 1.0 Urgency: 1.0 Total: 32.956112

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 11.306561 Competence: 1.0 Urgency: 1.0 Total: 22.613123

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 7.1048384 Competence: 1.0 Urgency: 1.0 Total: 14.209677

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 7.2772136 Competence: 1.0 Urgency: 1.0 Total: 14.554427

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 4.623497 Competence: 1.0 Urgency: 1.0 Total: 9.246994

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 4.6877832 Competence: 1.0 Urgency: 1.0 Total: 9.3755665

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 9.398672 Competence: 1.0 Urgency: 1.0 Total: 18.797344

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 9.519075 Competence: 1.0 Urgency: 1.0 Total: 19.03815

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 5.808297 Competence: 1.0 Urgency: 1.0 Total: 11.616594

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 10.405307 Competence: 1.0 Urgency: 1.0 Total: 20.810614

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 10.505535 Competence: 1.0 Urgency: 1.0 Total: 21.01107

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 6.568689 Competence: 1.0 Urgency: 1.0 Total: 13.137378

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 6.7385974 Competence: 1.0 Urgency: 1.0 Total: 13.477195

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 4.234967 Competence: 1.0 Urgency: 1.0 Total: 8.469934

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 4.306396 Competence: 1.0 Urgency: 1.0 Total: 8.612792

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 3.0094604 Competence: 1.0 Urgency: 1.0 Total: 6.018921

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 3.0939536 Competence: 1.0 Urgency: 1.0 Total: 6.187907

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 8.386546 Competence: 1.0 Urgency: 1.0 Total: 16.773092

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 8.502859 Competence: 1.0 Urgency: 1.0 Total: 17.005718

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 5.1107945 Competence: 1.0 Urgency: 1.0 Total: 10.221589

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 5.2893023 Competence: 1.0 Urgency: 1.0 Total: 10.578605

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 3.389408 Competence: 1.0 Urgency: 1.0 Total: 6.778816

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 3.4745615 Competence: 1.0 Urgency: 1.0 Total: 6.949123

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 2.4003751 Competence: 1.0 Urgency: 1.0 Total: 4.8007503

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 1.6695379 Competence: 1.0 Urgency: 1.0 Total: 3.3390758

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 1.723521 Competence: 1.0 Urgency: 1.0 Total: 3.447042

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 1.1837583 Competence: 1.0 Urgency: 1.0 Total: 2.3675165

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 1.2440878 Competence: 1.0 Urgency: 1.0 Total: 2.4881756

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 7.143628 Competence: 1.0 Urgency: 1.0 Total: 14.287256

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 7.2606773 Competence: 1.0 Urgency: 1.0 Total: 14.521355

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 4.2056627 Competence: 1.0 Urgency: 1.0 Total: 8.411325

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 4.3782563 Competence: 1.0 Urgency: 1.0 Total: 8.756513

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 2.7814145 Competence: 1.0 Urgency: 1.0 Total: 5.562829

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 8.139894 Competence: 1.0 Urgency: 1.0 Total: 16.279787

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 8.262836 Competence: 1.0 Urgency: 1.0 Total: 16.525673

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 4.882237 Competence: 1.0 Urgency: 1.0 Total: 9.764474

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 5.034267 Competence: 1.0 Urgency: 1.0 Total: 10.068534

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 3.330389 Competence: 1.0 Urgency: 1.0 Total: 6.660778

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 3.3892982 Competence: 1.0 Urgency: 1.0 Total: 6.7785964

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 2.352993 Competence: 1.0 Urgency: 1.0 Total: 4.705986

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 2.4089117 Competence: 1.0 Urgency: 1.0 Total: 4.8178234

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 1.6662097 Competence: 1.0 Urgency: 1.0 Total: 3.3324194

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 1.7281438 Competence: 1.0 Urgency: 1.0 Total: 3.4562876

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 1.1850168 Competence: 1.0 Urgency: 1.0 Total: 2.3700335

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 1.2532125 Competence: 1.0 Urgency: 1.0 Total: 2.506425

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 0.8499782 Competence: 1.0 Urgency: 1.0 Total: 1.6999564

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 0.57929385 Competence: 1.0 Urgency: 1.0 Total: 1.1585877

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 0.618586 Competence: 1.0 Urgency: 1.0 Total: 1.237172

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 0.4102117 Competence: 1.0 Urgency: 1.0 Total: 0.8204234

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 0.44860417 Competence: 1.0 Urgency: 1.0 Total: 0.89720833

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 0.40719542 Competence: 1.0 Urgency: 1.0 Total: 0.81439084

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 0.52275723 Competence: 1.0 Urgency: 1.0 Total: 1.0455145

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 7.010214 Competence: 1.0 Urgency: 1.0 Total: 14.020428

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 7.110874 Competence: 1.0 Urgency: 1.0 Total: 14.221748

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 4.15395 Competence: 1.0 Urgency: 1.0 Total: 8.3079

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 4.319297 Competence: 1.0 Urgency: 1.0 Total: 8.638594

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 9.748249 Competence: 1.0 Urgency: 1.0 Total: 19.496498

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 9.827914 Competence: 1.0 Urgency: 1.0 Total: 19.655828

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 13.587957 Competence: 1.0 Urgency: 1.0 Total: 27.175915

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 13.60432 Competence: 1.0 Urgency: 1.0 Total: 27.20864

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 9.209428 Competence: 1.0 Urgency: 1.0 Total: 18.418856

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 9.303806 Competence: 1.0 Urgency: 1.0 Total: 18.607613

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 5.7594485 Competence: 1.0 Urgency: 1.0 Total: 11.518897

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 10.833399 Competence: 1.0 Urgency: 1.0 Total: 21.666798

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 10.909686 Competence: 1.0 Urgency: 1.0 Total: 21.819372

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 6.9248743 Competence: 1.0 Urgency: 1.0 Total: 13.849749

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 7.0738583 Competence: 1.0 Urgency: 1.0 Total: 14.1477165

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 11.822867 Competence: 1.0 Urgency: 1.0 Total: 23.645735

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 11.881913 Competence: 1.0 Urgency: 1.0 Total: 23.763826

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 7.7653165 Competence: 1.0 Urgency: 1.0 Total: 15.530633

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 7.89673 Competence: 1.0 Urgency: 1.0 Total: 15.79346

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 4.6697655 Competence: 1.0 Urgency: 1.0 Total: 9.339531

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 4.7975903 Competence: 1.0 Urgency: 1.0 Total: 9.5951805

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 3.243853 Competence: 1.0 Urgency: 1.0 Total: 6.487706

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 3.3266296 Competence: 1.0 Urgency: 1.0 Total: 6.6532593

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 8.879548 Competence: 1.0 Urgency: 1.0 Total: 17.759096

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 8.992824 Competence: 1.0 Urgency: 1.0 Total: 17.985647

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 5.434161 Competence: 1.0 Urgency: 1.0 Total: 10.868322

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 10.554825 Competence: 1.0 Urgency: 1.0 Total: 21.10965

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 10.6479435 Competence: 1.0 Urgency: 1.0 Total: 21.295887

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 6.6742268 Competence: 1.0 Urgency: 1.0 Total: 13.3484535

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 6.8377924 Competence: 1.0 Urgency: 1.0 Total: 13.675585

Removing forgotten intention MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 13.854202 Competence: 1.0 Urgency: 1.0 Total: 27.708405

Removing forgotten intention MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 12.316964 Competence: 1.0 Urgency: 1.0 Total: 24.633928

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 12.391956 Competence: 1.0 Urgency: 1.0 Total: 24.783913

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 7.348933 Competence: 1.0 Urgency: 1.0 Total: 14.697866

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 12.552471 Competence: 1.0 Urgency: 1.0 Total: 25.104942

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 12.620884 Competence: 1.0 Urgency: 1.0 Total: 25.241768

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 7.822764 Competence: 1.0 Urgency: 1.0 Total: 15.645528

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 7.971432 Competence: 1.0 Urgency: 1.0 Total: 15.942864

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 8.113652 Competence: 1.0 Urgency: 1.0 Total: 16.227304

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 12.889005 Competence: 1.0 Urgency: 1.0 Total: 25.77801

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 8.263494 Competence: 1.0 Urgency: 1.0 Total: 16.526987

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 8.395649 Competence: 1.0 Urgency: 1.0 Total: 16.791298

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 13.061294 Competence: 1.0 Urgency: 1.0 Total: 26.122587

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 13.101163 Competence: 1.0 Urgency: 1.0 Total: 26.202326

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 8.590612 Competence: 1.0 Urgency: 1.0 Total: 17.181225

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 8.708463 Competence: 1.0 Urgency: 1.0 Total: 17.416925

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 13.25674 Competence: 1.0 Urgency: 1.0 Total: 26.51348

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 8.738069 Competence: 1.0 Urgency: 1.0 Total: 17.476137

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 8.848326 Competence: 1.0 Urgency: 1.0 Total: 17.696651

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 5.2430696 Competence: 1.0 Urgency: 1.0 Total: 10.486139

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 5.417686 Competence: 1.0 Urgency: 1.0 Total: 10.835372

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 3.458123 Competence: 1.0 Urgency: 1.0 Total: 6.916246

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 3.5076015 Competence: 1.0 Urgency: 1.0 Total: 7.015203

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 2.4272246 Competence: 1.0 Urgency: 1.0 Total: 4.8544493

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 2.4740565 Competence: 1.0 Urgency: 1.0 Total: 4.948113

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 1.7074764 Competence: 1.0 Urgency: 1.0 Total: 3.4149528

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 1.7607601 Competence: 1.0 Urgency: 1.0 Total: 3.5215201

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 7.848343 Competence: 1.0 Urgency: 1.0 Total: 15.696686

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 4.5632653 Competence: 1.0 Urgency: 1.0 Total: 9.126531

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 4.703106 Competence: 1.0 Urgency: 1.0 Total: 9.406212

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 4.8708143 Competence: 1.0 Urgency: 1.0 Total: 9.741629

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 3.1428692 Competence: 1.0 Urgency: 1.0 Total: 6.2857385

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 2.192153 Competence: 1.0 Urgency: 1.0 Total: 4.384306

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 2.2280974 Competence: 1.0 Urgency: 1.0 Total: 4.456195

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 8.146834 Competence: 1.0 Urgency: 1.0 Total: 16.293669

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 8.265111 Competence: 1.0 Urgency: 1.0 Total: 16.530222

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 4.895319 Competence: 1.0 Urgency: 1.0 Total: 9.790638

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 5.0525975 Competence: 1.0 Urgency: 1.0 Total: 10.105195

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 3.3119335 Competence: 1.0 Urgency: 1.0 Total: 6.623867

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 3.3771374 Competence: 1.0 Urgency: 1.0 Total: 6.754275

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 9.008061 Competence: 1.0 Urgency: 1.0 Total: 18.016123

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 5.39161 Competence: 1.0 Urgency: 1.0 Total: 10.78322

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 5.537695 Competence: 1.0 Urgency: 1.0 Total: 11.07539

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 10.766135 Competence: 1.0 Urgency: 1.0 Total: 21.53227

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 10.858195 Competence: 1.0 Urgency: 1.0 Total: 21.71639

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 14.194767 Competence: 1.0 Urgency: 1.0 Total: 28.389534

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 14.209965 Competence: 1.0 Urgency: 1.0 Total: 28.41993

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 15.359221 Competence: 1.0 Urgency: 1.0 Total: 30.718443

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 15.37213 Competence: 1.0 Urgency: 1.0 Total: 30.74426

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 16.122889 Competence: 1.0 Urgency: 1.0 Total: 32.245777

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 16.634329 Competence: 1.0 Urgency: 1.0 Total: 33.268658

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 16.642607 Competence: 1.0 Urgency: 1.0 Total: 33.285213

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 11.390838 Competence: 1.0 Urgency: 1.0 Total: 22.781675

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 11.4897175 Competence: 1.0 Urgency: 1.0 Total: 22.979435

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 7.2873836 Competence: 1.0 Urgency: 1.0 Total: 14.574767

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 4.694436 Competence: 1.0 Urgency: 1.0 Total: 9.388872

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 4.7504096 Competence: 1.0 Urgency: 1.0 Total: 9.500819

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 3.3153238 Competence: 1.0 Urgency: 1.0 Total: 6.6306477

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 3.3767223 Competence: 1.0 Urgency: 1.0 Total: 6.7534447

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 8.417384 Competence: 1.0 Urgency: 1.0 Total: 16.834768

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 8.539999 Competence: 1.0 Urgency: 1.0 Total: 17.079998

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 5.1100817 Competence: 1.0 Urgency: 1.0 Total: 10.220163

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 5.2812047 Competence: 1.0 Urgency: 1.0 Total: 10.562409

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 10.018602 Competence: 1.0 Urgency: 1.0 Total: 20.037205

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 6.1941304 Competence: 1.0 Urgency: 1.0 Total: 12.388261

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 6.36455 Competence: 1.0 Urgency: 1.0 Total: 12.7291

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 10.896835 Competence: 1.0 Urgency: 1.0 Total: 21.79367

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 10.975619 Competence: 1.0 Urgency: 1.0 Total: 21.951239

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 6.974771 Competence: 1.0 Urgency: 1.0 Total: 13.949542

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 7.1268654 Competence: 1.0 Urgency: 1.0 Total: 14.253731

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 4.2538476 Competence: 1.0 Urgency: 1.0 Total: 8.507695

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 4.3028927 Competence: 1.0 Urgency: 1.0 Total: 8.605785

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 4.394391 Competence: 1.0 Urgency: 1.0 Total: 8.788782

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 3.0441196 Competence: 1.0 Urgency: 1.0 Total: 6.088239

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 8.268765 Competence: 1.0 Urgency: 1.0 Total: 16.53753

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 8.390703 Competence: 1.0 Urgency: 1.0 Total: 16.781406

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 4.966353 Competence: 1.0 Urgency: 1.0 Total: 9.932706

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 5.1276274 Competence: 1.0 Urgency: 1.0 Total: 10.255255

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 5.306211 Competence: 1.0 Urgency: 1.0 Total: 10.612422

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 3.4004247 Competence: 1.0 Urgency: 1.0 Total: 6.8008494

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 8.52875 Competence: 1.0 Urgency: 1.0 Total: 17.0575

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 8.651044 Competence: 1.0 Urgency: 1.0 Total: 17.302088

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 12.773363 Competence: 1.0 Urgency: 1.0 Total: 25.546726

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 12.807774 Competence: 1.0 Urgency: 1.0 Total: 25.615547

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 8.559593 Competence: 1.0 Urgency: 1.0 Total: 17.119186

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 8.670267 Competence: 1.0 Urgency: 1.0 Total: 17.340534

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 12.841486 Competence: 1.0 Urgency: 1.0 Total: 25.682972

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 12.867021 Competence: 1.0 Urgency: 1.0 Total: 25.734041

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 8.649471 Competence: 1.0 Urgency: 1.0 Total: 17.298943

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 12.885132 Competence: 1.0 Urgency: 1.0 Total: 25.770264

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 12.909579 Competence: 1.0 Urgency: 1.0 Total: 25.819159

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 8.629098 Competence: 1.0 Urgency: 1.0 Total: 17.258196

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 8.729078 Competence: 1.0 Urgency: 1.0 Total: 17.458157

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 5.2982116 Competence: 1.0 Urgency: 1.0 Total: 10.596423

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 5.464805 Competence: 1.0 Urgency: 1.0 Total: 10.92961

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 3.3156998 Competence: 1.0 Urgency: 1.0 Total: 6.6313996

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 3.3840005 Competence: 1.0 Urgency: 1.0 Total: 6.768001

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 8.642104 Competence: 1.0 Urgency: 1.0 Total: 17.284208

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 8.7606945 Competence: 1.0 Urgency: 1.0 Total: 17.521389

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 5.282717 Competence: 1.0 Urgency: 1.0 Total: 10.565434

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 10.199608 Competence: 1.0 Urgency: 1.0 Total: 20.399216

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 10.297295 Competence: 1.0 Urgency: 1.0 Total: 20.59459

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 13.991667 Competence: 1.0 Urgency: 1.0 Total: 27.983334

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 14.008764 Competence: 1.0 Urgency: 1.0 Total: 28.017529

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 9.431093 Competence: 1.0 Urgency: 1.0 Total: 18.862186

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 9.530292 Competence: 1.0 Urgency: 1.0 Total: 19.060583

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 13.491995 Competence: 1.0 Urgency: 1.0 Total: 26.98399

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 13.5102825 Competence: 1.0 Urgency: 1.0 Total: 27.020565

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 9.09525 Competence: 1.0 Urgency: 1.0 Total: 18.1905

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 9.192966 Competence: 1.0 Urgency: 1.0 Total: 18.385933

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 5.667521 Competence: 1.0 Urgency: 1.0 Total: 11.335042

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 10.601918 Competence: 1.0 Urgency: 1.0 Total: 21.203836

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 10.682245 Competence: 1.0 Urgency: 1.0 Total: 21.36449

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 6.769109 Competence: 1.0 Urgency: 1.0 Total: 13.538218

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 6.9207225 Competence: 1.0 Urgency: 1.0 Total: 13.841445

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 11.564648 Competence: 1.0 Urgency: 1.0 Total: 23.129295

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 11.626747 Competence: 1.0 Urgency: 1.0 Total: 23.253494

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 7.5626626 Competence: 1.0 Urgency: 1.0 Total: 15.125325

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 7.69724 Competence: 1.0 Urgency: 1.0 Total: 15.39448

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 4.5366874 Competence: 1.0 Urgency: 1.0 Total: 9.073375

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 3.1232471 Competence: 1.0 Urgency: 1.0 Total: 6.2464943

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 3.1728292 Competence: 1.0 Urgency: 1.0 Total: 6.3456583

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 2.200186 Competence: 1.0 Urgency: 1.0 Total: 4.400372

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 2.2468464 Competence: 1.0 Urgency: 1.0 Total: 4.493693

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 7.9366355 Competence: 1.0 Urgency: 1.0 Total: 15.873271

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 8.055839 Competence: 1.0 Urgency: 1.0 Total: 16.111677

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 12.576232 Competence: 1.0 Urgency: 1.0 Total: 25.152464

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 12.6066885 Competence: 1.0 Urgency: 1.0 Total: 25.213377

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 14.710626 Competence: 1.0 Urgency: 1.0 Total: 29.421251

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 14.724984 Competence: 1.0 Urgency: 1.0 Total: 29.449968

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 9.9887 Competence: 1.0 Urgency: 1.0 Total: 19.9774

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 10.085446 Competence: 1.0 Urgency: 1.0 Total: 20.170893

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 13.909025 Competence: 1.0 Urgency: 1.0 Total: 27.81805

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 13.925717 Competence: 1.0 Urgency: 1.0 Total: 27.851435

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 15.331912 Competence: 1.0 Urgency: 1.0 Total: 30.663824

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 15.344718 Competence: 1.0 Urgency: 1.0 Total: 30.689436

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 16.118555 Competence: 1.0 Urgency: 1.0 Total: 32.23711

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 16.128897 Competence: 1.0 Urgency: 1.0 Total: 32.257793

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 11.034934 Competence: 1.0 Urgency: 1.0 Total: 22.069868

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 14.414874 Competence: 1.0 Urgency: 1.0 Total: 28.829748

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 14.432163 Competence: 1.0 Urgency: 1.0 Total: 28.864326

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 15.72549 Competence: 1.0 Urgency: 1.0 Total: 31.45098

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 15.737578 Competence: 1.0 Urgency: 1.0 Total: 31.475157

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 16.477001 Competence: 1.0 Urgency: 1.0 Total: 32.954002

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 16.485796 Competence: 1.0 Urgency: 1.0 Total: 32.971592

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 11.252357 Competence: 1.0 Urgency: 1.0 Total: 22.504713

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 11.350942 Competence: 1.0 Urgency: 1.0 Total: 22.701883

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 14.563143 Competence: 1.0 Urgency: 1.0 Total: 29.126286

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 14.580345 Competence: 1.0 Urgency: 1.0 Total: 29.16069

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 15.786818 Competence: 1.0 Urgency: 1.0 Total: 31.573635

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 15.798972 Competence: 1.0 Urgency: 1.0 Total: 31.597944

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 10.778047 Competence: 1.0 Urgency: 1.0 Total: 21.556093

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 10.87589 Competence: 1.0 Urgency: 1.0 Total: 21.75178

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 14.221595 Competence: 1.0 Urgency: 1.0 Total: 28.44319

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 14.23984 Competence: 1.0 Urgency: 1.0 Total: 28.47968

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 15.557599 Competence: 1.0 Urgency: 1.0 Total: 31.115198

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 15.5707035 Competence: 1.0 Urgency: 1.0 Total: 31.141407

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 10.628198 Competence: 1.0 Urgency: 1.0 Total: 21.256395

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 6.612502 Competence: 1.0 Urgency: 1.0 Total: 13.225004

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 6.7844057 Competence: 1.0 Urgency: 1.0 Total: 13.568811

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 11.222361 Competence: 1.0 Urgency: 1.0 Total: 22.444721

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 11.301414 Competence: 1.0 Urgency: 1.0 Total: 22.602827

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 7.205511 Competence: 1.0 Urgency: 1.0 Total: 14.411022

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 7.3578186 Competence: 1.0 Urgency: 1.0 Total: 14.715637

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 4.415264 Competence: 1.0 Urgency: 1.0 Total: 8.830528

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 4.478658 Competence: 1.0 Urgency: 1.0 Total: 8.957316

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 9.306273 Competence: 1.0 Urgency: 1.0 Total: 18.612547

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 9.425466 Competence: 1.0 Urgency: 1.0 Total: 18.850931

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 5.7450047 Competence: 1.0 Urgency: 1.0 Total: 11.490009

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 5.9213424 Competence: 1.0 Urgency: 1.0 Total: 11.842685

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 3.8637645 Competence: 1.0 Urgency: 1.0 Total: 7.727529

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 3.934114 Competence: 1.0 Urgency: 1.0 Total: 7.868228

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 8.966367 Competence: 1.0 Urgency: 1.0 Total: 17.932734

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 9.084354 Competence: 1.0 Urgency: 1.0 Total: 18.168709

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 13.09564 Competence: 1.0 Urgency: 1.0 Total: 26.19128

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 13.125629 Competence: 1.0 Urgency: 1.0 Total: 26.251259

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 8.801681 Competence: 1.0 Urgency: 1.0 Total: 17.603361

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 8.908904 Competence: 1.0 Urgency: 1.0 Total: 17.817808

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 5.431448 Competence: 1.0 Urgency: 1.0 Total: 10.862896

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 10.2895565 Competence: 1.0 Urgency: 1.0 Total: 20.579113

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 10.378406 Competence: 1.0 Urgency: 1.0 Total: 20.756811

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 13.850153 Competence: 1.0 Urgency: 1.0 Total: 27.700306

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 13.868373 Competence: 1.0 Urgency: 1.0 Total: 27.736746

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 9.347226 Competence: 1.0 Urgency: 1.0 Total: 18.694452

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 9.446481 Competence: 1.0 Urgency: 1.0 Total: 18.892962

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 13.358274 Competence: 1.0 Urgency: 1.0 Total: 26.716549

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 13.377608 Competence: 1.0 Urgency: 1.0 Total: 26.755217

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 8.982685 Competence: 1.0 Urgency: 1.0 Total: 17.96537

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 9.08192 Competence: 1.0 Urgency: 1.0 Total: 18.16384

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 5.551585 Competence: 1.0 Urgency: 1.0 Total: 11.10317

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 5.7179027 Competence: 1.0 Urgency: 1.0 Total: 11.435805

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 3.5011942 Competence: 1.0 Urgency: 1.0 Total: 7.0023885

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 3.5864239 Competence: 1.0 Urgency: 1.0 Total: 7.1728477

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 2.47545 Competence: 1.0 Urgency: 1.0 Total: 4.9509

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 1.7166449 Competence: 1.0 Urgency: 1.0 Total: 3.4332898

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 1.7619244 Competence: 1.0 Urgency: 1.0 Total: 3.5238488

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 7.5174294 Competence: 1.0 Urgency: 1.0 Total: 15.034859

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 7.6372395 Competence: 1.0 Urgency: 1.0 Total: 15.274479

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 4.4528713 Competence: 1.0 Urgency: 1.0 Total: 8.905743

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 4.617445 Competence: 1.0 Urgency: 1.0 Total: 9.23489

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 9.760906 Competence: 1.0 Urgency: 1.0 Total: 19.521812

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 9.855606 Competence: 1.0 Urgency: 1.0 Total: 19.711212

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 6.1732945 Competence: 1.0 Urgency: 1.0 Total: 12.346589

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 6.3347874 Competence: 1.0 Urgency: 1.0 Total: 12.669575

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 3.8869836 Competence: 1.0 Urgency: 1.0 Total: 7.7739673

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 9.0058155 Competence: 1.0 Urgency: 1.0 Total: 18.011631

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 9.126371 Competence: 1.0 Urgency: 1.0 Total: 18.252743

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 13.262963 Competence: 1.0 Urgency: 1.0 Total: 26.525927

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 13.293989 Competence: 1.0 Urgency: 1.0 Total: 26.587978

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 15.117535 Competence: 1.0 Urgency: 1.0 Total: 30.23507

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 15.131028 Competence: 1.0 Urgency: 1.0 Total: 30.262056

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 10.287847 Competence: 1.0 Urgency: 1.0 Total: 20.575693

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 10.384991 Competence: 1.0 Urgency: 1.0 Total: 20.769981

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 14.05747 Competence: 1.0 Urgency: 1.0 Total: 28.11494

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 14.074387 Competence: 1.0 Urgency: 1.0 Total: 28.148773

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 15.480711 Competence: 1.0 Urgency: 1.0 Total: 30.961422

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 16.20765 Competence: 1.0 Urgency: 1.0 Total: 32.4153

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 16.217651 Competence: 1.0 Urgency: 1.0 Total: 32.435303

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 16.709232 Competence: 1.0 Urgency: 1.0 Total: 33.418465

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 16.717056 Competence: 1.0 Urgency: 1.0 Total: 33.434113

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 11.453648 Competence: 1.0 Urgency: 1.0 Total: 22.907295

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 11.551631 Competence: 1.0 Urgency: 1.0 Total: 23.103262

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 7.329406 Competence: 1.0 Urgency: 1.0 Total: 14.658812

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 7.498696 Competence: 1.0 Urgency: 1.0 Total: 14.997392

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 11.5847025 Competence: 1.0 Urgency: 1.0 Total: 23.169405

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 14.45079 Competence: 1.0 Urgency: 1.0 Total: 28.90158

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Intention: MakeAnotherLaugh(John) Utilitity: 14.468812 Competence: 1.0 Urgency: 1.0 Total: 28.937624

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 9.780742 Competence: 1.0 Urgency: 1.0 Total: 19.561483

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 9.88172 Competence: 1.0 Urgency: 1.0 Total: 19.76344

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 13.502662 Competence: 1.0 Urgency: 1.0 Total: 27.005323

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Intention: MakeAnotherLaugh(John) Utilitity: 13.52344 Competence: 1.0 Urgency: 1.0 Total: 27.04688

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Mock</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

@Sam(SELF:true) inferseffects: SELF:LameJoke(John)

adding EVENT(SELF,LameJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

appraising event: EVENT(John,SpeechAct,SELF,Mock)

appraising event: EVENT(SELF,LameJoke,John)

Updating motivator Affiliation

Goal FAILED - MakeAnotherLaugh(John)

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 15.010986 Competence: 1.0 Urgency: 1.0 Total: 30.021973

Plan Finished: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Plan Commited: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Adding a new Intention: MakeAnotherLaugh(John)

Selecting Action: SELF:SuccesfulJoke(John)from plan:Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Sending action for execution: say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

Cannot act now!

Sam: Processing message: ACTION-FINISHED Sam say <SpeechAct type="SpeechAct"><Sender>Sam</Sender><Receiver>John</Receiver><Type>Joke</Type><Context id="me">Sam</Context><Context id="you">John</Context><Context id="sex">m</Context><Context id="me">Sam</Context><Context id="role">sam</Context><Context id="yourole">john</Context><Parameters></Parameters></SpeechAct>

appraising event: EVENT(SELF,SpeechAct,John,Joke)

Sam: Processing message: ACTION-FINISHED John say <SpeechAct type="SpeechAct"><Sender>John</Sender><Receiver>Sam</Receiver><Type>Laugh</Type><Context id="me">John</Context><Context id="you">Sam</Context><Context id="sex">m</Context><Context id="me">John</Context><Context id="role">john</Context><Context id="yourole">sam</Context><Parameters></Parameters></SpeechAct>

can act now!

@Sam(SELF:true) inferseffects: SELF:SuccesfulJoke(John)

adding EVENT(SELF,SuccesfulJoke,John) = True to ToM Sam(SELF:true)

ToM [SELF]

adding SELF(toldJoke) = True to ToM Sam(SELF:true)

ToM [*]

adding John(heardJoke) = True to ToM Sam(SELF:true)

ToM [*]

can act now!

ContinuousP Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]: extending a link for condition [*]:EVENT(SELF,SuccesfulJoke,John) to start.

Continuous P. Plan P=1.0 Steps: [] removing redundant step

appraising event: EVENT(John,SpeechAct,SELF,Laugh)

appraising event: EVENT(SELF,SuccesfulJoke,John)

Updating motivator Affiliation

Adding 1st level intention: MakeAnotherLaugh(John)

Switching 2nd level intention from null to Intention: ActivePursuitGoal: MakeAnotherLaugh(John)

Best plan: Plan P=1.0 Steps: []

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Best plan: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Found solution: Plan P=1.0 Steps: [SELF:SuccesfulJoke(John)]

Intention: MakeAnotherLaugh(John) Utilitity: 10.158933 Competence: 1.0 Urgency: 1.0 Total: 20.317865
